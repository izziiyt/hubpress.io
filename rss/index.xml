<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[Untitled RSS Feed]]></description><link>http://github.com/dylang/node-rss</link><generator>RSS for Node</generator><lastBuildDate>Sun, 05 Mar 2017 15:26:37 GMT</lastBuildDate><atom:link href="undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[JavaエンジニアにScalaの話を聞いてみたい@ScalaMatsuri2017]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>せっかく座長やったんだったら内容をまとめてくれと <a href="https://twitter.com/seratch_ja">@seratch_ja</a> さんに言われたので、やってみました。</p>
</div>
<div class="paragraph">
<p>2016年には学生ボランティアとしてScalaMatsuriに参加し、
今年のScalaMatsuriには社会人エンジニアとして参加させていただきました。</p>
</div>
<div class="paragraph">
<p>2016年はScalaのフレームワークを用いたサービス、アーキテクチャにあまり興味がなく（研究のために使っていただけなので。。。）、一番研究に近そうな機械学習に関するセッションは「数式は省きます」、のせいもあってセッションの大半はつまらない。Scalaエンジニアと知り合えたこと、Scalaの開発におけるtipsを知ることができたのが実りという感想でした。なんとなくで参加するのはダメですね(笑)</p>
</div>
<div class="paragraph">
<p>一方2017年はエンジニアとしての価値観を装備し、「streamに関して知見を集めてこい」との上司の司令もあって、目的意識を持って参加してみると実りの多さに興奮しました。
昨年のボランティア参加経験によって私のことを覚えてくださっていた方もチラホラいらっしゃり、積極的に話しかけていくことで寂しい思いをせずに楽しむことができました。</p>
</div>
<div class="paragraph">
<p><strong>去年の参加経験は無駄ではなかったんやー！！(喜)</strong></p>
</div>
<div class="paragraph">
<p>まえがきはこの辺りにして”聞きたい側”として座長を務めさせていただいたセッションでの議論を以下にまとめます。議事録と自分の意見が混在した文章になっていますがご了承を。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_scala">JavaエンジニアにScalaの話を聞きたい</h2>
<div class="sectionbody">
<div class="paragraph">
<p>このセッションタイトル名からは先生と生徒という確立した立場での議論になるかなりそうなものですが、結果として教える側教わる側という立場を超えた議論ができたのでないかと思います。</p>
</div>
<div class="paragraph">
<p>議題は主に以下の４つです。</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Scalaのメリット</p>
</li>
<li>
<p>ScalaとJavaの親和性</p>
</li>
<li>
<p>言語間の移動が面倒（文法忘れちゃう）</p>
</li>
<li>
<p>JavaからScalaにチームで移行するには</p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="_1_scala">1.Scalaのメリット</h3>
<div class="paragraph">
<p>コード量が減って見たいものが一画面に収まる。型で頑健性の高いコードが書ける。nullを避ける書き方は安全。
末尾再帰最適化もある。それでいてJavaの資産が使える。ベターJavaとして使うのでも全然メリットを感じられる。</p>
</div>
<div class="paragraph">
<p><strong>ベターJavaとは？</strong></p>
</div>
<div class="paragraph">
<p>（一同）うーむ</p>
</div>
<div class="paragraph">
<p>ちょっと議論はありましたが、”ベターJavaとして使おう”とは、Scalaっぽい書き方を目指す必要はなく、Scalaのいいとことろを無理なく採用していけばJavaよりも綺麗でいい感じに書けるよ、ぐらいの意図。データ分析系のScala使いは早く書けて早く動作するHigh Productivity Languageとして使用しており、数式を実装に落しこむ時はガリガリindex for書いてます。そっちの方が可読性も高い。とは言ってもコアじゃない部分は関数型的に書いたほうが見通しがいい場面がほとんどです。</p>
</div>
<div class="paragraph">
<p><strong>nullを返さないのがなぜ推奨されるのか</strong></p>
</div>
<div class="paragraph">
<p>nullを返すというのはバグの原因の追求が難しく、複雑なシステムを作る上でnullを返さない世界はいいぞとのことです。</p>
</div>
</div>
<div class="sect2">
<h3 id="_2_scala_java">2.ScalaとJavaの親和性</h3>
<div class="paragraph">
<p>Scalaのオブジェクトにはcase classやtrait,ObjectというJavaにはない概念がある。そうしたオブジェクトを呼ぶと問題が起きる。
例えばtraitは実装がなければJavaのinterfaceになるが実装をつけると複数のclassが作成されてしまう。abstract classを噛ませよう。sealed traitは継承することができてしまう。case classやObjectを呼び出すことの具体的な問題点は聞いていないがやってはいけない。</p>
</div>
<div class="paragraph">
<p>意外に落とし穴なのが設計思想が異なることで、ScalaからJavaの実装を呼ぶとガンガンnullが返ってきたりしてしてビビる。貧弱なJavaの型からScalaの型へはimplicit　conversion, converterでよしなにやってくれる。逆は上記の技術的障壁を越えればScalaエンジニアなら困らないかもしれないがJavaが主役であればJavaの設計思想に合わせたラッパを噛ませる必要があるかも（？）</p>
</div>
</div>
<div class="sect2">
<h3 id="_3">3.言語間の移動が面倒</h3>
<div class="paragraph">
<p>Scala書いてJava書いてpython書いて。。。Scala書くとセミコロンつけちゃう。</p>
</div>
<div class="paragraph">
<p>（一同）わかるー</p>
</div>
<div class="paragraph">
<p>でもIDEだと間違ってたらすぐ教えてくれるし、すぐ元通りだよ。</p>
</div>
<div class="paragraph">
<p>（一同）<strong>IntelliJ最高！</strong></p>
</div>
</div>
<div class="sect2">
<h3 id="_4_java_scala">4.JavaからScalaにチーム移行するには</h3>
<div class="paragraph">
<p>まずメリットの共有が重要。
PerlからScalaに移行した話、Perl嫌だーってなってて型に守られた安全性の高いScalaの環境にみんな心から満足して移行した。</p>
</div>
<div class="paragraph">
<p><strong>Javaからの場合、Javaに満足していたら移行するメリットなさそうですよね？</strong></p>
</div>
<div class="paragraph">
<p>Javaを書ける人ならScalaの仕様に感動する。Javaの面倒臭いところが本当に簡単に書ける。</p>
</div>
<div class="paragraph">
<p><strong>でもデメリットもあるんでしょう？</strong></p>
</div>
<div class="paragraph">
<p>Scalaライクなコードを書く、つまり関数型しようとするとオブジェクトの生成というロスがある。これはFinchの話でもでてきたことで90%にスピードが落ちるがそれを上回る型によるの安全性のメリットがある。Java likeなコードはScalaでも書けるのでそこは適材適所。
<strong>検証が大事。</strong></p>
</div>
<div class="paragraph">
<p><strong>おいおいパフォーマンスが落ちたぞー(怒)みたいのがあると思う。</strong></p>
</div>
<div class="paragraph">
<p>話を聞く限りにおいてScalaのほうが良い場面が多いという意見なので、そこは高いScala技術をもってすればいい着地点に到達できると思う</p>
</div>
<div class="paragraph">
<p><strong>ライブラリによって独自DSLがあって演算子の意味が違ってややこしい</strong></p>
</div>
<div class="paragraph">
<p>でも例えばSpringとかヤバいし（わかる）、DSLっていい解なのでは。
DSLを簡単に書けるのはいいことなのでは。
macroが散乱するわけではなく、DSLはあくまで多様な演算子が使えるというだけだし、慣れたScalaエンジニア的にはそんなに問題だとは思わない。IntelliJ使ってれば予測変換候補からScala doc開いて選択ができるしね。
<strong>IntelliJ最高！</strong></p>
</div>
<div class="paragraph">
<p><strong>書き方の多様性やばい。</strong></p>
</div>
<div class="paragraph">
<p>（一同）わかるー</p>
</div>
<div class="paragraph">
<p>チームでの移行の最も大きな問題か。</p>
</div>
<div class="paragraph">
<p>個人で移行する分には自分のペースでScalaライクなコードに成長させていくことができるが、チームでやるには規約を定める必要がある。一人が突っ走ってFree monadがそこら中に転がってみんな読めないことがあった。とは言うものの個人個人がいいものを見つけたら共有してチームのScalaレベルを上げる必要もある。ただそれが徐々に積み重なるとヤバくなると思うので<strong>Scalaをわかる人がコーディング規約を決めていく必要があると思う。</strong></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__">結論</h2>
<div class="sectionbody">
<div class="paragraph">
<p>JavaからScalaに変えるメリットは &#8594; いっぱいあるから触ってみて！習熟することで見えるメリット、気にならなくなるデメリットがある！</p>
</div>
<div class="paragraph">
<p>ScalaとJavaの親和性 &#8594; 高い。だだし技術的な障壁だけでなく文化的な障壁もある</p>
</div>
<div class="paragraph">
<p>言語間の移動が面倒 &#8594; IntelliJ! IntelliJ!</p>
</div>
<div class="paragraph">
<p>JavaからScalaにチームで移行するには &#8594; Scalaエンジニアとしての知見とマネージメントスキル！検証！（大変そうだ、、、）</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="___2">あとがき</h2>
<div class="sectionbody">
<div class="paragraph">
<p>ScalaMatsuri2016に参加した時もアンカンファレンスはあって、折角みんなで議論できる場なのに、声の大きい人が自己満足を満たす場になってしまっているセッションに参加した経験があります。「JavaエンジニアにScalaの話を聞きたい」は”教える側”と”教わる側”がはっきり分かれそうなタイトルのセッションだったため、去年見た残念なセッションになる確率がゼロじゃない、なっては嫌だという思いもあり、今回のセッションはScalaコミュニティの常連っぽい人が来ても主導権は渡しませんでした（笑）結果的にいろいろな人が意見を出せるTHE アンカンファレンスになったのではないかと思います。</p>
</div>
<div class="paragraph">
<p>なんだか去年のScalaMatsuriに対して批判的ですが、目的意識を持っていけばとても勉強になるカンファレンスです。しかし私のように</p>
</div>
<div class="paragraph">
<p><strong>なんとなくScalaが好きだから</strong></p>
</div>
<div class="paragraph">
<p>という理由で参加すると直近では後悔するかもしれません。特に学生。
学生という時間のある身だと、そんなの本読みゃ分かるわ！ってなる場合が、なんとなく行ったセッションでは発生しかねません。</p>
</div>
<div class="paragraph">
<p>あ、<strong>参加するのを辞めとけとは微塵も思っていません！</strong>自分は結局去年参加したことが今回のプラスに繋がったし、学生には<strong>目的意識を持って楽しんで欲しい</strong>ということです。</p>
</div>
<div class="paragraph">
<p>以上</p>
</div>
</div>
</div>]]></description><link>undefined/2017/03/05/Java-Scala-Scala-Matsuri2017.html</link><guid isPermaLink="true">undefined/2017/03/05/Java-Scala-Scala-Matsuri2017.html</guid><category><![CDATA[ScalaMatsuri2017]]></category><category><![CDATA[Scala]]></category><dc:creator><![CDATA[izziiyt]]></dc:creator><pubDate>Sun, 05 Mar 2017 00:00:00 GMT</pubDate></item></channel></rss>